# DEPENDENCIES ------------------------------------------------------------

library(tidyverse)
library(vroom)
library(ICPIutilities)
library(glue)

# IMPORT (don't forget to change direction from / to /------------------------------------------------------------------

  path <- "Data/MER_Structured_Datasets_PSNU_IM_FY18-21_20200918_v2_1_Zambia.zip"
  
  df <- vroom(path) 

# MUNGE -------------------------------------------------------------------
  
#filter
  df_fltr <- df %>% 
    filter(fundingagency == "USAID",
           fiscal_year == 2020,
           indicator %in% c("PrEP_NEW", "PrEP_CURR", "HTS_SELF", "HTS_TST",
                            "TX_NEW", "TX_CURR", "TX_PVLS", "PMTCT_ART"),
           standardizeddisaggregate %in% c("Total Numerator", "Total Denominator",
                                           "Modality/Age/Sex/Result", "Modality/Age Aggregated/Sex/Result",
                                           "KeyPop/HIVStatus", "Age/NewExistingArt/Sex/HIVStatus"))
#remove extra disaggs
  df_fltr <- df_fltr %>% 
    filter(!(indicator %in% c("HTS_TST", "PMTCT_ART") & 
               standardizeddisaggregate %in% c("Total Numerator", "Total Denominator"))) %>% 
    filter(!(indicator == "TX_PVLS" & standardizeddisaggregate == "Total Numerator"))
  
#check indicators/disaggs
  # df_fltr %>% 
  #   arrange(indicator) %>% 
  #   distinct(indicator, standardizeddisaggregate)
  
#include in var name
  df_fltr <- df_fltr %>% 
    mutate(indicator = ifelse(numeratordenom == "D", glue("{indicator}_{numeratordenom}"), indicator),
           suffix = case_when(!is.na(modality) ~ modality,
                              indicator == "PMTCT_ART" ~ otherdisaggregate,
                              str_detect(standardizeddisaggregate, "KeyPop") ~ "KP",
                              TRUE ~ "Total"),
           suffix = str_remove_all(suffix, "-|,| "))

#check suffix
  # df_fltr %>% 
  #   distinct(indicator, standardizeddisaggregate, otherdisaggregate, modality,suffix) %>% 
  #   print(n = Inf)
  
#aggregate
  df_agg <- df_fltr %>%
    filter(targets != 0) %>% 
    group_by(operatingunit, psnu, psnuuid, indicator, suffix) %>%
    summarise(targets = sum(targets, na.rm = TRUE)) %>% 
    ungroup()
  
#spread data
  df_wide <- df_agg %>% 
    pivot_wider(names_from = c(indicator, suffix),
                names_sep = ".",
                values_from = targets)
  
  # glimpse(df_wide)
  
# MUNGE PREP_NEW  ----------------------------------------------------

#filter
df_prepnew <- df %>% 
  filter(fundingagency == "USAID",
         fiscal_year == 2020,
         indicator == "PrEP_NEW",
         standardizeddisaggregate %in% c("Total Numerator")) 

#aggregate
df_prepnew <- df_prepnew %>% 
  group_by(operatingunit, psnu, psnuuid, indicator, modality) %>%
  summarise(targets = sum(targets, na.rm = TRUE)) %>% 
  ungroup()

#spread in PrEPNEW dataset
df_prepnew <- df_prepnew %>% 
  mutate(modality = str_remove_all(modality, " ")) %>% 
  pivot_wider(names_from = c(indicator, modality),
              values_from = targets)

# MUNGE PREP_CURR  ----------------------------------------------------

#filter
df_prepcurr <- df %>% 
  filter(fundingagency == "USAID",
         fiscal_year == 2020,
         indicator == "PrEP_CURR",
         standardizeddisaggregate %in% c("Total Numerator")) 

#aggregate
df_prepcurr <- df_prepcurr %>% 
  group_by(operatingunit, psnu, psnuuid, indicator, modality) %>%
  summarise(targets = sum(targets, na.rm = TRUE)) %>% 
  ungroup()

#spread in PrEPCURR dataset
df_prepcurr <- df_prepcurr %>% 
  mutate(modality = str_remove_all(modality, " ")) %>% 
  pivot_wider(names_from = c(indicator, modality),
              values_from = targets)

# MUNGE HTS_SELF MODALITIES ----------------------------------------------------

#filter
df_htsself <- df %>% 
  filter(fundingagency == "USAID",
         fiscal_year == 2020,
         indicator == "HTS_SELF",
         standardizeddisaggregate %in% c("Total Numerator")) 

#aggregate
df_htsself <- df_htsself %>% 
  group_by(operatingunit, psnu, psnuuid, indicator, modality) %>%
  summarise(targets = sum(targets, na.rm = TRUE)) %>% 
  ungroup()

#spread
df_htsself <- df_htsself %>% 
  mutate(modality = str_remove_all(modality, " ")) %>% 
  pivot_wider(names_from = c(indicator, modality),
              values_from = targets)

# MUNGE HTS_TST MODALITIES ----------------------------------------------------

#filter
df_htstst <- df %>% 
  filter(fundingagency == "USAID",
         fiscal_year == 2020,
         indicator == "HTS_TST",
         standardizeddisaggregate %in% c("Modality/Age/Sex/Result", "Modality/Age Aggregated/Sex/Result")) 

#aggregate
df_htstst <- df_htstst %>% 
  group_by(operatingunit, psnu, psnuuid, indicator, modality) %>%
  summarise(targets = sum(targets, na.rm = TRUE)) %>% 
  ungroup()

#spread
df_htstst <- df_htstst %>% 
  mutate(modality = str_remove_all(modality, " ")) %>% 
  pivot_wider(names_from = c(indicator, modality),
              values_from = targets)

# MUNGE TX_NEW data ----------------------------------------------------

#filter
df_txnew <- df %>% 
  filter(fundingagency == "USAID",
         fiscal_year == 2020,
         indicator == "TX_NEW",
         standardizeddisaggregate %in% c("Total Numerator", "KeyPop/HIVStatus")) 

#aggregate
df_txnew <- df_txnew %>% 
  group_by(operatingunit, psnu, psnuuid, indicator, modality, standardizeddisaggregate) %>%
  summarise(targets = sum(targets, na.rm = TRUE)) %>% 
  ungroup()

#spread in TX_NEW dataset
df_txnew <- df_txnew %>% 
  mutate(modality = str_remove_all(modality, " ")) %>% 
  pivot_wider(names_from = c(indicator, modality, standardizeddisaggregate),
              values_from = targets)

# MUNGE TX_CURR data ----------------------------------------------------

#filter
df_txcurr <- df %>% 
  filter(fundingagency == "USAID",
         fiscal_year == 2020,
         indicator == "TX_CURR",
         standardizeddisaggregate %in% c("Total Numerator", "KeyPop/HIVStatus")) 

#aggregate
df_txcurr <- df_txcurr %>% 
  group_by(operatingunit, psnu, psnuuid, indicator, modality, standardizeddisaggregate) %>%
  summarise(targets = sum(targets, na.rm = TRUE)) %>% 
  ungroup()

#spread in TX_CURR dataset
df_txcurr <- df_txcurr %>% 
  mutate(modality = str_remove_all(modality, " ")) %>% 
  pivot_wider(names_from = c(indicator, modality, standardizeddisaggregate),
              values_from = targets)

# MUNGE PMTCT_ART data ----------------------------------------------------

#filter
df_pmtctart <- df %>% 
  filter(fundingagency == "USAID",
         fiscal_year == 2020,
         indicator == "PMTCT_ART",
         otherdisaggregate %in% c("Life-long ART, New", "Life-long ART, Already")) 

#aggregate
df_pmtctart <- df_pmtctart %>% 
  group_by(operatingunit, psnu, psnuuid, indicator, modality, otherdisaggregate) %>%
  summarise(targets = sum(targets, na.rm = TRUE)) %>% 
  ungroup()

#spread in PMTCT_ART dataset
df_pmtctart <- df_pmtctart %>% 
  mutate(modality = str_remove_all(modality, " ")) %>% 
  pivot_wider(names_from = c(indicator, modality, otherdisaggregate),
              values_from = targets)

# MUNGE TX_PVLS data ----------------------------------------------------

#filter
df_txpvls <- df %>% 
  filter(fundingagency == "USAID",
         fiscal_year == 2020,
         indicator == "TX_PVLS",
         standardizeddisaggregate %in% c("Total Denominator")) 

#aggregate
df_txpvls <- df_txpvls %>% 
  group_by(operatingunit, psnu, psnuuid, indicator, modality, standardizeddisaggregate) %>%
  summarise(targets = sum(targets, na.rm = TRUE)) %>% 
  ungroup()

#spread in TX_PVLS dataset
df_txpvls <- df_txpvls %>% 
  mutate(modality = str_remove_all(modality, " ")) %>% 
  pivot_wider(names_from = c(indicator, modality, standardizeddisaggregate),
              values_from = targets)

 #Using left join to merge--------------------------
df_merged <- left_join(df_htstst, df_htsself)
df_merged <- left_join(df_merged, df_txcurr)
df_merged <- left_join(df_merged, df_txnew)
df_merged <- left_join(df_merged, df_txpvls)
df_merged <- left_join(df_merged, df_pmtctart)
df_merged <- left_join(df_merged, df_prepcurr)
df_merged <- left_join(df_merged, df_prepnew)

#save merged file as csv
write.csv(df_merged, 'zambiatargets.csv')
